###########
# BUILDER #
###########
FROM python:3.10.9-alpine as builder

# set work directory
WORKDIR /project/

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# install dependencies
COPY Pipfile Pipfile.lock /project/

RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev libffi-dev openssl-dev \
    && apk add postgresql-dev \
    && pip install psycopg2 \
    && apk del build-deps
# install pipenv on the container
RUN pip install --upgrade pip
# pillow preparation
RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev \
    && apk add --no-cache g++ freetype-dev \
    && apk add jpeg-dev zlib-dev libjpeg \
    && pip install Pillow \
    && apk del build-deps
RUN apk update && apk add python3-dev libxml2-dev libxslt-dev  \
                        gcc \
                        libc-dev \
                        libffi-dev
RUN pip install -U pipenv

# install project dependencies
RUN pipenv install --system


#########
# FINAL #
#########

# pull official base image
FROM python:3.9.6-alpine

# create directory for the app user
RUN mkdir -p /home/app

# create the app user
RUN addgroup -S app && adduser -S app -G app

# create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
RUN mkdir $APP_HOME/static
RUN mkdir $APP_HOME/media
WORKDIR $APP_HOME

# install dependencies
COPY ./Pipfile $APP_HOME
COPY ./Pipfile.lock $APP_HOME
RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev libffi-dev openssl-dev \
    && apk add postgresql-dev \
    && pip install psycopg2 \
    && apk del build-deps
# install pipenv on the container
RUN pip install --upgrade pip
# pillow preparation
RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev \
    && apk add --no-cache g++ freetype-dev \
    && apk add jpeg-dev zlib-dev libjpeg \
    && pip install Pillow \
    && apk del build-deps
RUN apk update && apk add python3-dev libxml2-dev libxslt-dev  \
                        gcc \
                        libc-dev \
                        libffi-dev
RUN pip install -U pipenv

# install project dependencies
RUN pipenv install --system

# copy entrypoint.prod.sh
COPY .build/entrypoint.prod.sh $APP_HOME
RUN sed -i 's/\r$//g'  $APP_HOME/entrypoint.prod.sh
RUN chmod +x  $APP_HOME/entrypoint.prod.sh

# copy project
COPY . $APP_HOME

# chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app



EXPOSE 8000
STOPSIGNAL SIGTERM
# copy project
COPY . $APP_HOME
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]
